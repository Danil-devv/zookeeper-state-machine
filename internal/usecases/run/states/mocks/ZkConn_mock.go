// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"

	zk "github.com/go-zookeeper/zk"
)

// ZkConn is an autogenerated mock type for the ZkConn type
type ZkConn struct {
	mock.Mock
}

// CheckConnection provides a mock function with given fields:
func (_m *ZkConn) CheckConnection() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CheckConnection")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Children provides a mock function with given fields: path
func (_m *ZkConn) Children(path string) ([]string, *zk.Stat, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Children")
	}

	var r0 []string
	var r1 *zk.Stat
	var r2 error
	if rf, ok := ret.Get(0).(func(string) ([]string, *zk.Stat, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *zk.Stat); ok {
		r1 = rf(path)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*zk.Stat)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(path)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Close provides a mock function with given fields:
func (_m *ZkConn) Close() {
	_m.Called()
}

// Create provides a mock function with given fields: path, data, flags, acl
func (_m *ZkConn) Create(path string, data []byte, flags int32, acl []zk.ACL) (string, error) {
	ret := _m.Called(path, data, flags, acl)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []byte, int32, []zk.ACL) (string, error)); ok {
		return rf(path, data, flags, acl)
	}
	if rf, ok := ret.Get(0).(func(string, []byte, int32, []zk.ACL) string); ok {
		r0 = rf(path, data, flags, acl)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, []byte, int32, []zk.ACL) error); ok {
		r1 = rf(path, data, flags, acl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: path, version
func (_m *ZkConn) Delete(path string, version int32) error {
	ret := _m.Called(path, version)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int32) error); ok {
		r0 = rf(path, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: path
func (_m *ZkConn) Exists(path string) (bool, *zk.Stat, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 *zk.Stat
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (bool, *zk.Stat, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) *zk.Stat); ok {
		r1 = rf(path)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*zk.Stat)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(path)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Reconnect provides a mock function with given fields: servers, timeout
func (_m *ZkConn) Reconnect(servers []string, timeout time.Duration) error {
	ret := _m.Called(servers, timeout)

	if len(ret) == 0 {
		panic("no return value specified for Reconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, time.Duration) error); ok {
		r0 = rf(servers, timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewZkConn creates a new instance of ZkConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewZkConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *ZkConn {
	mock := &ZkConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
